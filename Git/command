# git 시작하기
git init
git remote add origin https://github.com/onmycode/boj_code.git // 로컬저장소와 원격저장소 연결
git status
git add . // 로컬폴더의 모든 파일을 add
git reset // add 취소 명령
git commit -m "[commit message]" 
  // Author identity unknown 발생 해결법
  // git config --global user.email "이메일주소"
  // git config --global user.name "이름"
  // 맨 처음에 한 번만 설정하면 됨 & 다시 git commit~
git push origin main // commit을 main branch(default branch) 에 push 하는 명령어
  // 주의 : git push origin master 을 하면 master라는 new branch가 생성되고 default branch에 반영이 안됨
  // master가 노예제를 연상하는 단어라서 default branch의 이름이 main으로 변경되었기 때문
  // git bash에선 master로 기본 checkout 되어 있어서 수동으로 변경하는 방법을 찾았다
  // $ git checkout master // master branch로 이동(already on 'master')
  // $ git branch -m master main // 로컬에서 master 이름을 main으로 변경(git bash에서 main으로 바뀐 것을 확인)
  // $ git fetch // 서버(Github) 에서 최신 commit을 가져오는 명령 
  // $ git branch --unset-upstream // origin/master와 연결 제거하는 명령
        // fetal: Branch 'main' has no upstream informaion (그냥 넘어감..)
  // $ git branch -u origin/main // origin/main 과 연결하는 명령
  // $ git symbolic-ret refs/remotes/origin/HEAD refs/remotes/origin/main //default branch를 origin/main으로 업데이트하는 명령

  // error: failed to push some refs to 'https://github.com/onmycode/boj_code.git'
  // 깃허브 사이트를 통해 작업한 이력이 있기 때문
  // git pull 명령어로 프로젝트를 병합해주면 된다.
  // git pull 실행 시 fetal: refusing to merge unrelated histories 발생할 경우
  // $ git pull origin [branch name] --allow-unrelated-histories 
  // 명령옵션 '--allow-unrelated-histories' 은 이미 존재하는 두 프로젝트의 history를 저장하는 드문 상황에 사용된다.
  // 즉, git에서는 서로 관련 기록이 없는 이질적인 두 프로젝트를 병합할 때 기본적으로 거부하는데, 이것을 허용해주는 것이다.
  // create mode 100644 README.md 라는 메시지와 함께 해결되었다. 다시 git push origin main 실행하면 성공
  
# git add 취소하기
$ git reset // add된 모든 파일 취소
$ git reset HEAD [filename] // 특정파일 취소

# git clone 
원격 저장소에 있는 폴더를 로컬로 가져오는 명령어. 현재 디렉토리에 Github의 저장소(repository)를 그대로 복사(clone) 해준다. 

# git config --list
설정이 잘 되었는지 확인하는 명령어
init.defaultbranch=master
user.email=
user.name=onmycode
  // $ git config --global init.defaultBranch main 를 실행하고 다시 git config --list하면
  // init.defaultbranch=main 으로 바뀌어있다.

# git pull과 git fetch의 차이
git pull
 : 원격 저장소로부터 필요한 파일을 다운 + 병합
 : 로컬 브랜치와, 원격 저장소 origin/master 가 같은 위치를 가리킨다.
git fetch
 : 원격 저장소로부터 필요한 파일을 다운(병합은 따로 해야 함)
 : 로컬 브랜치는 원래 가지고 있던 로컬 저장소의 최근 커밋 위치를 가리키고, 원격 저장소 origin/master는 가져온 최신 커밋을 가리킨다.
 : 신중할 때 사용
 : 사용하는 이유
   - 원래 내용과 바뀐 내용과의 차이를 알 수 있다(git diff HEAD origin/master)
   - commit이 얼마나 됐는지 알 수 있다(git log --decorate --all --online)
   - 이런 세부 내용 확인 후 git merge origin/master 하면 git pull 상태와 같아진다.(병합 완료)
pull과 fetch 후 git log --decorate -all 명령어를 통해 확인을 해보면,
pull을 했을 때는 master(local 저장소)와 origin/master(원격저장소)가 같은 커밋을 가리킴
fetch를 했을 때는 origin/master(원격저장소)가 master(local저장소)보다 커밋이 앞서있다. 왜냐하면 아직 local저장소에 merge하지 않은 상태.
